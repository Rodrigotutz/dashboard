generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                 @id @default(autoincrement())
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  email               String              @unique
  name                String
  password            String
  confirmed           Boolean?
  confirmCode         String?
  type                UserType            @default(user)
  themeId             Int?
  googleAccessToken   String?
  googleRefreshToken  String?
  googleTokenExpiry   BigInt?
  Message             Message[]
  passwordResetTokens PasswordResetToken?
  tips                Post[]
  RoomUser            RoomUser[]
  Schedule            Schedule[]
  theme               Theme?              @relation(fields: [themeId], references: [id])
  Tip                 Tip[]

  @@map("users")
}

model Theme {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  primary    String   @default("blue-600")
  secondary  String   @default("purple-500")
  background String   @default("white")
  error      String   @default("red-500")
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  users      User[]

  @@map("themes")
}

model SchedulingType {
  id        Int        @id @default(autoincrement())
  title     String     @unique
  label     String
  active    Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  schedules Schedule[]

  @@map("scheduling_types")
}

model City {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  label     String
  active    Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  schedules Schedule[]

  @@map("cities")
}

model Schedule {
  id            Int            @id @default(autoincrement())
  typeId        Int
  userId        Int
  description   String
  scheduledDate DateTime
  status        String         @default("pending")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  cityId        Int
  googleEventId String?
  city          City           @relation(fields: [cityId], references: [id])
  type          SchedulingType @relation(fields: [typeId], references: [id])
  user          User           @relation(fields: [userId], references: [id])

  @@map("schedules")
}

model Category {
  id        Int      @id @default(autoincrement())
  title     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  label     String
  posts     Post[]

  @@map("categories")
}

model Tip {
  id        Int      @id @default(autoincrement())
  userId    Int
  title     String
  slug      String   @unique
  likes     Int      @default(0)
  dislikes  Int      @default(0)
  content   String
  public    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@map("tips")
}

model Post {
  id         Int       @id @default(autoincrement())
  userId     Int
  title      String
  slug       String    @unique @default("")
  likes      Int?      @default(0)
  dislikes   Int?      @default(0)
  content    String
  public     Boolean?  @default(false)
  categoryId Int?
  Category   Category? @relation(fields: [categoryId], references: [id])
  user       User      @relation(fields: [userId], references: [id])

  @@map("posts")
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  email     String
  token     String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("password_reset_tokens")
}

model SmtpConfig {
  id          Int    @id @default(autoincrement())
  host        String
  port        Int
  password    String
  fromAddress String @unique
  fromName    String

  @@map("smtp_config")
}

model Room {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  name      String     @unique
  messages  Message[]
  users     RoomUser[]

  @@map("rooms")
}

model RoomUser {
  id       Int      @id @default(autoincrement())
  roomId   Int
  userId   Int
  joinedAt DateTime @default(now())
  room     Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([roomId, userId])
  @@map("room_users")
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  roomId    Int
  userId    Int
  content   String
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("messages")
}

enum UserType {
  user
  admin
}
