generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  email       String   @unique
  name        String
  password    String
  confirmed   Boolean?
  confirmCode String?
  type        UserType @default(user)

  themeId Int?
  theme   Theme? @relation(fields: [themeId], references: [id])

  passwordResetTokens PasswordResetToken[]
  RoomUser            RoomUser[]
  Message             Message[]
  tips                Post[]

  @@map("users")
}

enum UserType {
  user
  admin
}

model Theme {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  primary    String   @default("blue-600")
  secondary  String   @default("purple-500")
  background String   @default("white")
  error      String   @default("red-500")
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  users User[]

  @@map("themes")
}

model SchedulingType {
  id        Int        @id @default(autoincrement())
  title     String     @unique
  label     String
  active    Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  schedules Schedule[]

  @@map("scheduling_types")
}

model City {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  label     String
  active    Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  schedules Schedule[]

  @@map("cities")
}

model Schedule {
  id            Int            @id @default(autoincrement())
  typeId        Int
  type          SchedulingType @relation(fields: [typeId], references: [id])
  userId        Int
  cityId        Int
  city          City           @relation(fields: [cityId], references: [id])
  client        String
  description   String
  scheduledDate DateTime
  status        String         @default("pending")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("schedules")
}

model Category {
  id        Int      @id @default(autoincrement())
  title     String   @unique
  label     String
  posts     Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

model Post {
  id       Int      @id @default(autoincrement())
  userId   Int
  title    String
  slug     String   @unique @default("")
  likes    Int?     @default(0)
  dislikes Int?     @default(0)
  content  String
  public   Boolean? @default(false)

  user       User      @relation(fields: [userId], references: [id])
  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?

  @@map("posts")
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  email     String
  token     String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("password_reset_tokens")
}

model SmtpConfig {
  id          Int    @id @default(autoincrement())
  host        String
  port        Int
  password    String
  fromAddress String @unique
  fromName    String

  @@map("smtp_config")
}

model Room {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique

  users    RoomUser[]
  messages Message[]

  @@map("rooms")
}

model RoomUser {
  id       Int      @id @default(autoincrement())
  roomId   Int
  userId   Int
  joinedAt DateTime @default(now())

  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([roomId, userId])
  @@map("room_users")
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  roomId    Int
  userId    Int
  content   String

  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("messages")
}
