generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  email       String   @unique
  name        String
  password    String
  confirmed   Boolean?
  confirmCode String?
  type        UserType @default(user)

  passwordResetTokens PasswordResetToken[]
  RoomUser            RoomUser[]
  Message             Message[]
  tips                Tips[]

  @@map("users")
}

enum UserType {
  user
  admin
}

model Tips {
  id       Int     @id @default(autoincrement())
  userId   Int
  title    String
  likes    Int?    @default(0)
  dislikes Int?    @default(0)
  content  String
  public   Boolean? @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  email     String
  token     String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("password_reset_tokens")
}

model SmtpConfig {
  id          Int    @id @default(autoincrement())
  host        String
  port        Int
  password    String
  fromAddress String @unique
  fromName    String

  @@map("smtp_config")
}

model Room {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique

  users    RoomUser[]
  messages Message[]

  @@map("rooms")
}

model RoomUser {
  id       Int      @id @default(autoincrement())
  roomId   Int
  userId   Int
  joinedAt DateTime @default(now())

  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([roomId, userId])
  @@map("room_users")
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  roomId    Int
  userId    Int
  content   String

  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("messages")
}
